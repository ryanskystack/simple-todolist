{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["TodoList","useState","totalNum","setTotalNum","remainingNum","setRemainingNum","userInput","setUserInput","toDoLists","setTodolists","textInput","React","createRef","handleToggle","e","newTodolists","currentTarget","dataset","id","done","doneNum","index","length","className","type","placeholder","ref","value","onChange","target","onClick","current","todolists","concat","title","map","item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAGe,SAASA,IACtB,MAAgCC,mBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAwCF,mBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAkCJ,mBAAS,IAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAkCN,mBAAS,IAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KAEIC,EAAYC,IAAMC,YAkBhBC,EAAe,SAACC,GACpB,IAAMC,EAAY,YAAOP,GACpBA,EAAUM,EAAEE,cAAcC,QAAQC,IAAIC,KAGzCX,EAAUM,EAAEE,cAAcC,QAAQC,IAAIC,MAAO,EAF7CX,EAAUM,EAAEE,cAAcC,QAAQC,IAAIC,MAAO,EAI/CV,EAAaM,GAEb,IADA,IAAIK,EAAU,EACLC,EAAQ,EAAGA,EAAQN,EAAaO,OAAQD,IAAS,CACxCN,EAAaM,GACjBF,OACVC,GAAW,GAGff,EAAgBH,EAAWkB,IAG7B,OACE,qBAAKG,UAAU,YAAf,SACE,sBAAKA,UAAU,OAAf,UACE,2CAGA,kDAGA,oBAAGA,UAAU,UAAb,UACE,4BAAInB,IADN,qBACyC,4BAAIF,IAD7C,YAGA,uBACEsB,KAAK,OACLN,GAAG,YACHO,YAAY,cACZC,IAAKhB,EACLiB,MAAOrB,EACPsB,SAxCgB,SAACd,GACvBP,EAAaO,EAAEe,OAAOF,UAyClB,wBAAQT,GAAG,QAAQY,QAtDF,SAAChB,GACtB,IAAIR,EAAYI,EAAUqB,QAAQJ,MAChB,KAAdrB,IACFG,GAAa,SAACuB,GAAD,OACXA,EAAUC,OAAO,CAAEC,MAAO5B,EAAWa,MAAM,OAE7ChB,EAAYD,EAAW,GACvBG,EAAgBH,EAAW,GAC3BK,EAAa,MA8CX,iBAIA,6BACGC,EAAU2B,KAAI,SAACC,EAAMf,GAAP,OACb,oBAEE,UAASA,EACTS,QAASjB,EACTU,UAAWa,EAAKjB,KAAO,WAAa,GAJtC,SAMGiB,EAAKF,OALDb,QASX,oICjFR,IAYegB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.af1b2762.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport './App.css';\n\nexport default function TodoList() {\n  const [totalNum, setTotalNum] = useState(0);\n  const [remainingNum, setRemainingNum] = useState(0);\n  const [userInput, setUserInput] = useState(\"\");\n  const [toDoLists, setTodolists] = useState([]);\n\n  var textInput = React.createRef();\n\n  const onClickHandler = (e) => {\n    let userInput = textInput.current.value;\n    if (userInput !== \"\") {\n      setTodolists((todolists) =>\n        todolists.concat({ title: userInput, done: false })\n      );\n      setTotalNum(totalNum + 1);\n      setRemainingNum(totalNum + 1);\n      setUserInput(\"\");\n    }\n  };\n\n  const handleUserInput = (e) => {\n    setUserInput(e.target.value);\n  };\n\n  const handleToggle = (e) => {\n    const newTodolists = [...toDoLists];\n    if (!toDoLists[e.currentTarget.dataset.id].done) {\n      toDoLists[e.currentTarget.dataset.id].done = true;\n    } else {\n      toDoLists[e.currentTarget.dataset.id].done = false;\n    }\n    setTodolists(newTodolists);\n    var doneNum = 0;\n    for (let index = 0; index < newTodolists.length; index++) {\n      const element = newTodolists[index];\n      if (element.done) {\n        doneNum += 1;\n      }\n    }\n    setRemainingNum(totalNum - doneNum);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"list\">\n        <h1>\n          Todo List\n        </h1>\n        <p>\n          Get it done today\n        </p>\n        <p className=\"summary\">\n          <b>{remainingNum}</b> remaining out of <b>{totalNum}</b> tasks\n        </p>\n        <input\n          type=\"text\"\n          id=\"userinput\"\n          placeholder=\"enter items\"\n          ref={textInput}\n          value={userInput}\n          onChange={handleUserInput}\n        />\n        <button id=\"enter\" onClick={onClickHandler}>\n          Add\n        </button>\n\n        <ul>\n          {toDoLists.map((item, index) => (\n            <li\n              key={index}\n              data-id={index}\n              onClick={handleToggle}\n              className={item.done ? \"is-done \" : \"\"}\n            >\n              {item.title}\n            </li>\n          ))}\n        </ul>\n        <style>\n          {`   \n         .is-done {\n             text-decoration: line-through;\n         }\n       `}\n        </style>\n      </div>\n\n\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}