{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["TodoList","useState","totalNum","setTotalNum","remainingNum","setRemainingNum","itemInput","setItemInput","quantityInput","setQuantityInput","todoLists","setTodolists","inputRefs","useRef","current","map","ref","index","React","createRef","handleToggle","e","newTodolists","x","id","indexOf","parseInt","currentTarget","dataset","remove","done","doneNum","length","onClickRemover","splice","className","type","placeholder","value","onChange","target","isNaN","onClick","itemValue","quantityValue","replace","concat","title","quantity","item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f7c9a2a.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport './App.css';\n\nexport default function TodoList() {\n  const [totalNum, setTotalNum] = useState(0);\n  const [remainingNum, setRemainingNum] = useState(0);\n  const [itemInput, setItemInput] = useState(\"\");\n  const [quantityInput, setQuantityInput] = useState(\"\");\n  const [todoLists, setTodolists] = useState([]);\n\n  let inputRefs = useRef([]);\n\n  inputRefs.current = [0, 0].map(\n    (ref, index) => inputRefs.current[index] = React.createRef()\n  );\n\n  const onClickHandler = (e) => {\n    let itemValue = inputRefs.current[0].current.value;\n    let quantityValue = parseInt(inputRefs.current[1].current.value.replace(/\\D+/g, ''));\n    if (itemValue !== \"\") {\n      setTodolists((todoLists) =>\n        todoLists.concat({ id: totalNum, title: itemValue, done: false, remove: false, quantity: quantityValue }),\n      );\n      setTotalNum(totalNum + 1);\n      setRemainingNum(totalNum + 1);\n      setItemInput(\"\");\n      setQuantityInput(\"\");\n    }\n  };\n\n  const handleItemInput = (e) => {\n    setItemInput(e.target.value);\n  };\n\n  const handleQuantityInput = (e) => {\n    if (!isNaN(e.target.value)) {\n      setQuantityInput(`  ×  ${e.target.value}`)\n    } else {\n      setQuantityInput(e.target.value)\n    }\n  };\n\n  const handleToggle = (e) => {\n    const newTodolists = [...todoLists];\n    let index = todoLists.map(x => x.id).indexOf(parseInt(e.currentTarget.dataset.id));\n    todoLists[index].remove = true;\n    if (!todoLists[index].done) {\n      todoLists[index].done = true;\n    } else {\n      todoLists[index].done = false;\n    }\n    setTodolists(newTodolists);\n    let doneNum = 0;\n    for (let index = 0; index < newTodolists.length; index++) {\n      const element = newTodolists[index];\n      if (element.done) {\n        doneNum += 1;\n      }\n    }\n    setRemainingNum(totalNum - doneNum);\n  };\n\n  const onClickRemover = (e) => {\n\n    let index = todoLists.map(x => x.id).indexOf(parseInt(e.currentTarget.dataset.id));\n    todoLists[index].done = false;\n    todoLists.splice(index, 1);\n    setTodolists(todoLists);\n    let doneNum = 0;\n    for (let index = 0; index < todoLists.length; index++) {\n      const element = todoLists[index];\n      if (element.done) {\n        doneNum += 1;\n      }\n    }\n    setRemainingNum(todoLists.length - doneNum);\n    setTotalNum(todoLists.length);\n  };\n\n  return (\n    <div>\n      <div className=\"container\">\n        <h1>\n          Todo List\n        </h1>\n        <p>\n          Get it done today\n        </p>\n        <p className=\"summary\">\n          <b>{remainingNum}</b> remaining out of <b>{totalNum}</b> tasks\n        </p>\n        <div className=\"inputContainer\">\n          <input\n            type=\"text\"\n            id=\"itemInput\"\n            key=\"a\"\n            placeholder=\"Enter Items\"\n            ref={inputRefs.current[0]}\n            value={itemInput}\n            onChange={handleItemInput}\n          />\n          <input\n            type=\"text\"\n            key=\"b\"\n            id=\"quantityInput\"\n            placeholder=\"Quantity\"\n            ref={inputRefs.current[1]}\n            value={quantityInput}\n            onChange={handleQuantityInput}\n          />\n          <button id=\"enter\" onClick={onClickHandler}>\n            Add\n          </button>\n        </div>\n        <ul>\n          {todoLists.map((item, index) => (\n            <div className=\"list\" key={index}>\n              <li\n                data-id={item.id}\n                onClick={handleToggle}\n                className={item.done ? \"is-done \" : \"\"}\n              >\n                {item.quantity && !isNaN(item.quantity) ? `${item.title}  ×  ${item.quantity}` : item.title}\n              </li>\n              {item.done ? <button className=\"deleteButton\" data-id={item.id} onClick={onClickRemover}>Remove</button> : null}\n            </div>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}