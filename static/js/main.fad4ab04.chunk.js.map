{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["TodoList","jsonParsedTodolist","JSON","parse","localStorage","getItem","localTodoLists","todoLists","localTotalNum","totalNum","parseInt","localRemainingNum","remainingNum","useState","setTotalNum","setRemainingNum","itemInput","setItemInput","quantityInput","setQuantityInput","setTodolists","inputRefs","useRef","current","map","ref","index","React","createRef","handleToggle","e","newTodolists","x","id","indexOf","currentTarget","dataset","remove","done","setItem","stringify","doneNum","length","onClickRemover","splice","className","type","placeholder","value","onChange","target","isNaN","onClick","itemValue","quantityValue","replace","push","title","quantity","item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAGe,SAASA,IAEtB,IAAIC,EAAqBC,KAAKC,MAAMC,aAAaC,QAAQ,cACrDC,EAAiBF,aAAaG,WAAaN,EAAmBM,UAC9DC,EAAgBJ,aAAaK,UAAYC,SAASN,aAAaC,QAAQ,aACvEM,EAAoBP,aAAaQ,cAAgBF,SAASN,aAAaC,QAAQ,iBAGnF,EAAgCQ,mBAAST,aAAaK,SAAWD,EAAgB,GAAjF,mBAAOC,EAAP,KAAiBK,EAAjB,KACA,EAAwCD,mBAAST,aAAaQ,aAAeD,EAAoB,GAAjG,mBAAOC,EAAP,KAAqBG,EAArB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA0CJ,mBAAS,IAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KACA,EAAkCN,mBAAST,aAAaG,UAAYD,EAAiB,IAArF,mBAAOC,EAAP,KAAkBa,EAAlB,KAEIC,EAAYC,iBAAO,IAEvBD,EAAUE,QAAU,CAAC,EAAG,GAAGC,KACzB,SAACC,EAAKC,GAAN,OAAgBL,EAAUE,QAAQG,GAASC,IAAMC,eAGnD,IA+BMC,EAAe,SAACC,GACpB,IAAMC,EAAY,YAAOxB,GACrBmB,EAAQnB,EAAUiB,KAAI,SAAAQ,GAAC,OAAIA,EAAEC,MAAIC,QAAQxB,SAASoB,EAAEK,cAAcC,QAAQH,KAC9E1B,EAAUmB,GAAOW,QAAS,EACrB9B,EAAUmB,GAAOY,KAGpB/B,EAAUmB,GAAOY,MAAO,EAFxB/B,EAAUmB,GAAOY,MAAO,EAI1BlB,EAAaW,GACb3B,aAAamC,QAAQ,YAAarC,KAAKsC,UAAU,CAAEjC,UAAWwB,KAE9D,IADA,IAAIU,EAAU,EACLf,EAAQ,EAAGA,EAAQK,EAAaW,OAAQhB,IAAS,CACxCK,EAAaL,GACjBY,OACVG,GAAW,GAGf1B,EAAgBN,EAAWgC,GAC3BrC,aAAamC,QAAQ,eAAgB9B,EAAWgC,IAe5CE,EAAiB,SAACb,GAEtB,IAAIJ,EAAQnB,EAAUiB,KAAI,SAAAQ,GAAC,OAAIA,EAAEC,MAAIC,QAAQxB,SAASoB,EAAEK,cAAcC,QAAQH,KAC9E1B,EAAUmB,GAAOY,MAAO,EACxB/B,EAAUqC,OAAOlB,EAAO,GACxBN,EAAab,GAEb,IADA,IAAIkC,EAAU,EACLf,EAAQ,EAAGA,EAAQnB,EAAUmC,OAAQhB,IAAS,CACrCnB,EAAUmB,GACdY,OACVG,GAAW,GAGf1B,EAAgBR,EAAUmC,OAASD,GACnC3B,EAAYP,EAAUmC,QAEtBtC,aAAamC,QAAQ,YAAarC,KAAKsC,UAAU,CAAEjC,UAAWA,KAC9DH,aAAamC,QAAQ,WAAYhC,EAAUmC,QAC3CtC,aAAamC,QAAQ,eAAgBhC,EAAUmC,OAASD,IAG1D,OACE,8BACE,sBAAKI,UAAU,YAAf,UACE,2CAGA,kDAGA,oBAAGA,UAAU,UAAb,UACE,4BAAIjC,IADN,qBACyC,4BAAIH,IAD7C,YAGA,sBAAKoC,UAAU,iBAAf,UACE,uBACEC,KAAK,OACLb,GAAG,YAEHc,YAAY,cACZtB,IAAKJ,EAAUE,QAAQ,GACvByB,MAAOhC,EACPiC,SAvFc,SAACnB,GACvBb,EAAaa,EAAEoB,OAAOF,SAkFV,KAMN,uBACEF,KAAK,OAELb,GAAG,gBACHc,YAAY,WACZtB,IAAKJ,EAAUE,QAAQ,GACvByB,MAAO9B,EACP+B,SA5FkB,SAACnB,GACtBqB,MAAMrB,EAAEoB,OAAOF,OAGlB7B,EAAiBW,EAAEoB,OAAOF,OAF1B7B,EAAiB,WAAD,OAASW,EAAEoB,OAAOF,UAqFxB,KAON,wBAAQf,GAAG,QAAQmB,QArHJ,SAACtB,GACtB,IAAIuB,EAAYhC,EAAUE,QAAQ,GAAGA,QAAQyB,MACzCM,EAAgB5C,SAASW,EAAUE,QAAQ,GAAGA,QAAQyB,MAAMO,QAAQ,OAAQ,KAC9D,KAAdF,IACF9C,EAAUiD,KAAK,CAAEvB,GAAIxB,EAAUgD,MAAOJ,EAAWf,MAAM,EAAOD,QAAQ,EAAOqB,SAAUJ,IAGvFlC,EAAab,GACbO,EAAYL,EAAW,GACvBM,EAAgBN,EAAW,GAC3BQ,EAAa,IACbE,EAAiB,IAEjBf,aAAamC,QAAQ,YAAarC,KAAKsC,UAAU,CAAEjC,UAAWA,KAC9DH,aAAamC,QAAQ,WAAY9B,EAAW,GAC5CL,aAAamC,QAAQ,eAAgB9B,EAAW,KAsG5C,iBAGA,wBAAQwB,GAAG,QAAQmB,QAnEN,SAACtB,GACpBhB,EAAY,GACZC,EAAgB,GAChBE,EAAa,IACbE,EAAiB,IACjBC,EAAa,IAEbhB,aAAamC,QAAQ,YAAarC,KAAKsC,UAAU,CAAEjC,UAAW,MAC9DH,aAAamC,QAAQ,WAAY,GACjCnC,aAAamC,QAAQ,eAAgB,IA0D/B,sBAIF,6BACGhC,EAAUiB,KAAI,SAACmC,EAAMjC,GAAP,OACb,sBAAKmB,UAAU,OAAf,UACE,oBACE,UAASc,EAAK1B,GACdmB,QAASvB,EACTgB,UAAWc,EAAKrB,KAAO,WAAa,GAHtC,SAKGqB,EAAKD,WAAaP,MAAMQ,EAAKD,UAA7B,UAA4CC,EAAKF,MAAjD,mBAA8DE,EAAKD,UAAaC,EAAKF,QAEvFE,EAAKrB,KAAO,wBAAQO,UAAU,eAAe,UAASc,EAAK1B,GAAImB,QAAST,EAA5D,oBAA8F,OARlFjB,aCrJvC,IAYekC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fad4ab04.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport './App.css';\n\nexport default function TodoList() {\n\n  let jsonParsedTodolist = JSON.parse(localStorage.getItem('todoLists'));\n  let localTodoLists = localStorage.todoLists && jsonParsedTodolist.todoLists;\n  let localTotalNum = localStorage.totalNum && parseInt(localStorage.getItem('totalNum'));\n  let localRemainingNum = localStorage.remainingNum && parseInt(localStorage.getItem('remainingNum'));\n\n\n  const [totalNum, setTotalNum] = useState(localStorage.totalNum ? localTotalNum : 0);\n  const [remainingNum, setRemainingNum] = useState(localStorage.remainingNum ? localRemainingNum : 0);\n  const [itemInput, setItemInput] = useState(\"\");\n  const [quantityInput, setQuantityInput] = useState(\"\");\n  const [todoLists, setTodolists] = useState(localStorage.todoLists ? localTodoLists : []);\n\n  let inputRefs = useRef([]);\n\n  inputRefs.current = [0, 0].map(\n    (ref, index) => inputRefs.current[index] = React.createRef()\n  );\n\n  const onClickHandler = (e) => {\n    let itemValue = inputRefs.current[0].current.value;\n    let quantityValue = parseInt(inputRefs.current[1].current.value.replace(/\\D+/g, ''));\n    if (itemValue !== \"\") {\n      todoLists.push({ id: totalNum, title: itemValue, done: false, remove: false, quantity: quantityValue })\n      // setTodolists((todoLists) =>todoLists.concat({ id: totalNum, title: itemValue, done: false, remove: false, quantity: quantityValue }),\n      // );\n      setTodolists(todoLists);\n      setTotalNum(totalNum + 1);\n      setRemainingNum(totalNum + 1);\n      setItemInput(\"\");\n      setQuantityInput(\"\");\n\n      localStorage.setItem('todoLists', JSON.stringify({ todoLists: todoLists }));\n      localStorage.setItem('totalNum', totalNum + 1);\n      localStorage.setItem('remainingNum', totalNum + 1);\n    }\n  };\n\n  const handleItemInput = (e) => {\n    setItemInput(e.target.value);\n  };\n\n  const handleQuantityInput = (e) => {\n    if (!isNaN(e.target.value)) {\n      setQuantityInput(`  ×  ${e.target.value}`)\n    } else {\n      setQuantityInput(e.target.value)\n    }\n  };\n\n  const handleToggle = (e) => {\n    const newTodolists = [...todoLists];\n    let index = todoLists.map(x => x.id).indexOf(parseInt(e.currentTarget.dataset.id));\n    todoLists[index].remove = true;\n    if (!todoLists[index].done) {\n      todoLists[index].done = true;\n    } else {\n      todoLists[index].done = false;\n    }\n    setTodolists(newTodolists);\n    localStorage.setItem('todoLists', JSON.stringify({ todoLists: newTodolists }));\n    let doneNum = 0;\n    for (let index = 0; index < newTodolists.length; index++) {\n      const element = newTodolists[index];\n      if (element.done) {\n        doneNum += 1;\n      }\n    }\n    setRemainingNum(totalNum - doneNum);\n    localStorage.setItem('remainingNum', totalNum - doneNum);\n  };\n\n  const clearHandler = (e) => {\n    setTotalNum(0);\n    setRemainingNum(0);\n    setItemInput(\"\");\n    setQuantityInput(\"\");\n    setTodolists([]);\n\n    localStorage.setItem('todoLists', JSON.stringify({ todoLists: [] }));\n    localStorage.setItem('totalNum', 0);\n    localStorage.setItem('remainingNum', 0);\n  }\n\n  const onClickRemover = (e) => {\n\n    let index = todoLists.map(x => x.id).indexOf(parseInt(e.currentTarget.dataset.id));\n    todoLists[index].done = false;\n    todoLists.splice(index, 1);\n    setTodolists(todoLists);\n    let doneNum = 0;\n    for (let index = 0; index < todoLists.length; index++) {\n      const element = todoLists[index];\n      if (element.done) {\n        doneNum += 1;\n      }\n    }\n    setRemainingNum(todoLists.length - doneNum);\n    setTotalNum(todoLists.length);\n\n    localStorage.setItem('todoLists', JSON.stringify({ todoLists: todoLists }));\n    localStorage.setItem('totalNum', todoLists.length);\n    localStorage.setItem('remainingNum', todoLists.length - doneNum);\n  };\n\n  return (\n    <div>\n      <div className=\"container\">\n        <h1>\n          Todo List\n        </h1>\n        <p>\n          Get it done today\n        </p>\n        <p className=\"summary\">\n          <b>{remainingNum}</b> remaining out of <b>{totalNum}</b> tasks\n        </p>\n        <div className=\"inputContainer\">\n          <input\n            type=\"text\"\n            id=\"itemInput\"\n            key=\"a\"\n            placeholder=\"Enter Items\"\n            ref={inputRefs.current[0]}\n            value={itemInput}\n            onChange={handleItemInput}\n          />\n          <input\n            type=\"text\"\n            key=\"b\"\n            id=\"quantityInput\"\n            placeholder=\"Quantity\"\n            ref={inputRefs.current[1]}\n            value={quantityInput}\n            onChange={handleQuantityInput}\n          />\n          <button id=\"enter\" onClick={onClickHandler}>\n            Add\n          </button>\n          <button id=\"clear\" onClick={clearHandler}>\n            Clear\n          </button>\n        </div>\n        <ul>\n          {todoLists.map((item, index) => (\n            <div className=\"list\" key={index}>\n              <li\n                data-id={item.id}\n                onClick={handleToggle}\n                className={item.done ? \"is-done \" : \"\"}\n              >\n                {item.quantity && !isNaN(item.quantity) ? `${item.title}  ×  ${item.quantity}` : item.title}\n              </li>\n              {item.done ? <button className=\"deleteButton\" data-id={item.id} onClick={onClickRemover}>Remove</button> : null}\n            </div>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}