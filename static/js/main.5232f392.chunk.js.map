{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","totalNum","setTotalNum","remainingNum","setRemainingNum","userInput","setUserInput","toDoLists","setTodolists","textInput","React","createRef","handleToggle","e","newTodolists","currentTarget","dataset","id","done","console","log","doneNum","index","length","type","ref","value","onChange","target","onClick","current","todolists","concat","title","map","item","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAEe,SAASA,IACtB,MAAgCC,mBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAwCF,mBAAS,GAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAkCJ,mBAAS,IAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAkCN,mBAAS,IAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KAEIC,EAAYC,IAAMC,YAuBhBC,EAAe,SAACC,GACpB,IAAMC,EAAY,YAAOP,GACpBA,EAAUM,EAAEE,cAAcC,QAAQC,IAAIC,KAGzCX,EAAUM,EAAEE,cAAcC,QAAQC,IAAIC,MAAO,EAF7CX,EAAUM,EAAEE,cAAcC,QAAQC,IAAIC,MAAO,EAI/CC,QAAQC,IAAI,iBAAkBN,GAC9BN,EAAaM,GAEb,IADA,IAAIO,EAAU,EACLC,EAAQ,EAAGA,EAAQR,EAAaS,OAAQD,IAAS,CACxCR,EAAaQ,GACjBJ,OACVG,GAAW,GAGfjB,EAAgBH,EAAWoB,IAG7B,OACE,mCACE,gCACE,gCACE,gCACE,uBACEG,KAAK,OACLC,IAAKhB,EACLiB,MAAOrB,EACPsB,SAhCY,SAACd,GACvBP,EAAaO,EAAEe,OAAOF,UAiCd,wBAAQG,QAnDK,SAAChB,GACtB,IAAIR,EAAYI,EAAUqB,QAAQJ,MAClCP,QAAQC,IAAI,UAAWf,GACL,KAAdA,IACFc,QAAQC,IAAI,mBAAoBb,GAChCY,QAAQC,IAAI,kBAAmBnB,GAC/BO,GAAa,SAACuB,GAAD,OACXA,EAAUC,OAAO,CAAEC,MAAO5B,EAAWa,MAAM,OAE7CC,QAAQC,IAAI,kBAAmBb,GAC/BL,EAAYD,EAAW,GACvBG,EAAgBH,EAAW,GAC3BkB,QAAQC,IAAI,gBAAiBnB,GAC7BK,EAAa,MAsCP,oBAEF,8BACE,mCACGH,EADH,qBACmCF,EADnC,cAIF,8BACE,6BACGM,EAAU2B,KAAI,SAACC,EAAMb,GAAP,OACb,oBAEE,UAASA,EACTO,QAASjB,EACTwB,UAAWD,EAAKjB,KAAO,WAAa,GAJtC,SAMGiB,EAAKF,OALDX,aAWf,mLCnFR,IAYee,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACjD,EAAD,MAEFkD,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5232f392.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nexport default function App() {\n  const [totalNum, setTotalNum] = useState(0);\n  const [remainingNum, setRemainingNum] = useState(0);\n  const [userInput, setUserInput] = useState(\"\");\n  const [toDoLists, setTodolists] = useState([]);\n\n  var textInput = React.createRef();\n\n  const onClickHandler = (e) => {\n    let userInput = textInput.current.value;\n    console.log(\"Input: \", userInput);\n    if (userInput !== \"\") {\n      console.log(\"toDoLists prev: \", toDoLists);\n      console.log(\"totalNum prev: \", totalNum);\n      setTodolists((todolists) =>\n        todolists.concat({ title: userInput, done: false })\n      );\n      console.log(\"toDoLists new: \", toDoLists);\n      setTotalNum(totalNum + 1);\n      setRemainingNum(totalNum + 1);\n      console.log(\"totalNum new:\", totalNum);\n      setUserInput(\"\");\n    }\n  };\n\n  const handleUserInput = (e) => {\n    setUserInput(e.target.value);\n  };\n\n  const handleToggle = (e) => {\n    const newTodolists = [...toDoLists];\n    if (!toDoLists[e.currentTarget.dataset.id].done) {\n      toDoLists[e.currentTarget.dataset.id].done = true;\n    } else {\n      toDoLists[e.currentTarget.dataset.id].done = false;\n    }\n    console.log(\"newTodolists: \", newTodolists);\n    setTodolists(newTodolists);\n    var doneNum = 0;\n    for (let index = 0; index < newTodolists.length; index++) {\n      const element = newTodolists[index];\n      if (element.done) {\n        doneNum += 1;\n      }\n    }\n    setRemainingNum(totalNum - doneNum);\n  };\n\n  return (\n    <>\n      <div>\n        <div>\n          <div>\n            <input\n              type=\"text\"\n              ref={textInput}\n              value={userInput}\n              onChange={handleUserInput}\n            />\n            <button onClick={onClickHandler}>Add</button>\n          </div>\n          <div>\n            <header>\n              {remainingNum} remaining out of {totalNum} tasks\n            </header>\n          </div>\n          <div>\n            <ul>\n              {toDoLists.map((item, index) => (\n                <li\n                  key={index}\n                  data-id={index}\n                  onClick={handleToggle}\n                  className={item.done ? \"is-done \" : \"\"}\n                >\n                  {item.title}\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n        <style>{`\n                      .is-done {\n                          text-decoration: line-through;\n                      }\n                  `}</style>\n      </div>\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}